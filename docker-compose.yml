services:
  # ---------------------------------------------------------------
  # InfluxDB service
  # ---------------------------------------------------------------
  influxdb:
    container_name: influxdb         # Name the container "influxdb"
    image: influxdb:2               # Use the official InfluxDB v2 image
    env_file:
      - .env                        # Load environment variables from the .env file
    volumes:
      - influxdb-storage:/var/lib/influxdb2  # Named volume to persist InfluxDB data
      - ./entrypoint.sh:/entrypoint.sh:ro     # Mount custom entrypoint script (read-only)
    entrypoint: ["/entrypoint.sh"]  # Use our script as the container entrypoint
    ports:
      - "8086:8086"   # Map host port to container port 8086
    restart: unless-stopped         # Automatically restart unless manually stopped
    networks:
      - monitoring                  # Attach the container to the "monitoring" network
    healthcheck:
      # Use InfluxDBâ€™s built-in /health endpoint to verify the service is up.
      test: ["CMD", "curl", "--fail", "http://localhost:8086/health"]
      interval: 30s                 # Interval between health checks
      timeout: 10s                  # Time to wait for a response before marking as failed
      retries: 3                    # Number of consecutive failures before "unhealthy"
      start_period: 30s             # Grace period before starting health checks

  # ---------------------------------------------------------------
  # Telegraf service
  # ---------------------------------------------------------------
  telegraf:
    container_name: telegraf
    image: telegraf:latest
    env_file:
      - .env                        # Load environment variables from the .env file
    environment:
      - INFLUX_TOKEN=${INFLUX_TOKEN}  # Pass the InfluxDB token into the container
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf:ro  # Mount telegraf.conf (read-only)
    command: telegraf --config /etc/telegraf/telegraf.conf  
      # Override the default command to point to the config file
    depends_on:
      - influxdb                    # Ensure InfluxDB is started before Telegraf
    restart: unless-stopped
    networks:
      - monitoring
    healthcheck:
      # Simple check to confirm the Telegraf process is running
      test: ["CMD", "pgrep", "telegraf"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  ################################################
  # Grafana
  ################################################
  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - TZ=Etc/UTC
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_LOGS=/var/log/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-log:/var/log/grafana
      - ./grafana/provisioning:/var/lib/grafana/provisioning
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - monitoring

  ################################################
  # Mosquitto
  ################################################
  mosquitto:
    container_name: mosquitto
    image: eclipse-mosquitto:latest
    environment:
      - TZ=${TZ:-Etc/UTC}
    # Expose the MQTT port
    ports:
      - "1883:1883"
    # Use named volumes for data and logs, no config override
    volumes:
      - mosquitto-data:/mosquitto/data
      - mosquitto-log:/mosquitto/log
    restart: unless-stopped
    networks:
      - monitoring

  # ---------------------------------------------------------------
  # Portainer CE (Container management UI)
  # ---------------------------------------------------------------
  portainer-ce:
    container_name: portainer-ce
    image: portainer/portainer-ce:latest
    ports:
      - "8000:8000"  # Required for Portainer Edge agent
      - "9000:9000"  # Main Portainer UI
      - "9443:9443"  # HTTPS port for Portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  
        # Allow Portainer to communicate with Docker engine
      - ./volumes/portainer-ce/data:/data
        # Persist Portainer data (users, settings, etc.)
    restart: unless-stopped
    networks:
      - monitoring

# ---------------------------------------------------------------
# Named volumes
# ---------------------------------------------------------------
volumes:
  influxdb-storage:
  grafana-data:
  grafana-log:
  mosquitto-data:
  mosquitto-log:

# ---------------------------------------------------------------
# Docker network
# ---------------------------------------------------------------
networks:
  monitoring:
    driver: bridge  # Use a user-defined bridged network for all services
